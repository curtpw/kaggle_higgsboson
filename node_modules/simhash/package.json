{
  "name": "simhash",
  "description": "Calculate the simhash value for a list of tokens",
  "version": "0.1.0",
  "author": {
    "name": "Admazely",
    "email": "dev@admaze.ly"
  },
  "maintainers": [
    {
      "name": "David Bj√∂rklund",
      "email": "david.bjorklund@gmail.com"
    }
  ],
  "main": "./main.js",
  "scripts": {
    "test": "tap ./test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/admazely/simhash.git"
  },
  "keywords": [
    "hash",
    "simhash",
    "duplicate detection"
  ],
  "dependencies": {
    "buffer-crc32": "0.1.x"
  },
  "devDependencies": {
    "tap": "0.3.x"
  },
  "license": "MIT",
  "engines": {
    "node": "0.8",
    "npm": "1"
  },
  "readme": "simhash\n=======\n\nA node module to calculate the simhash (http://matpalm.com/resemblance/simhash/)\n\n## Installation\n\n```JavaScript\nnpm install simhash\n```\n\n## Example\n\nSimhash is hash that returns similar hash(es) for similar input - in contrast to other hashing algorithms.\n\n```JavaScript\n// will use crc32 as crypto algorithm as standard\nvar simhash = require('simhash')();\n\nvar result1 = simhash(['a', 'list', 'of', 'a', 'couple', 'of', 'tokens']);\n// return1 is [0,0,0,1,0,0,1,1,1,0,1,1,0,1,1,0,1,0,0,0,1,1,0,1,0,1,0,1,0,0,1,0]\n\nvar result2 = simhash(['a', 'list', 'of', 'a', 'couple', 'of', 'tokens', '!']);\n// result2 is [0,0,0,1,0,0,0,1,1,0,0,1,0,1,1,0,1,0,0,0,1,1,0,1,0,1,0,1,0,0,1,0]\n```\n\nYou can also choose to use another algoritm than the standard crc32 one\n\n```Javascript\nvar simhash = require('simhash')('md5');\n\nvar result = simhash(['a', 'list', 'of', 'a', 'couple', 'of', 'tokens']);\n```",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/admazely/simhash/issues"
  },
  "homepage": "https://github.com/admazely/simhash",
  "_id": "simhash@0.1.0",
  "dist": {
    "shasum": "e9144dbfe2c618e504b4ece47c1a51f822e1ff17"
  },
  "_from": "simhash@",
  "_resolved": "https://registry.npmjs.org/simhash/-/simhash-0.1.0.tgz"
}
